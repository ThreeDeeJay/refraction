// DYNAMIC: "COMPRESSED_VERTS"  "0..1"
// DYNAMIC: "DOWATERFOG"        "0..1"
// DYNAMIC: "SKINNING"          "0..1"
// DYNAMIC: "LIGHTING_PREVIEW"  "0..1"
// DYNAMIC: "NUM_LIGHTS"        "0..4"

#include "common_vs_fxc.h"

static const bool g_bSkinning = SKINNING;
static const int g_FogType = DOWATERFOG;

const float4 cBaseTexCoordTransform[2] : register(SHADER_SPECIFIC_CONST_0);

struct VSInput {
    float4 vPos                     : POSITION;
    float4 vBoneWeights             : BLENDWEIGHT;
    float4 vBoneIndices             : BLENDINDICES;
    float4 vNormal                  : NORMAL;
    float2 vTexCoord0               : TEXCOORD0;
    float4 vLightmapTexCoord        : TEXCOORD1;
    float4 vLightmapTexCoordOffset  : TEXCOORD2;
};

struct VSOutput {
    float4 projPosSetup             : POSITION;
    float  fog                      : FOG;
    float2 baseTexCoord             : TEXCOORD0;
    float4 lightAtten               : TEXCOORD1;
    float3 worldNormal              : TEXCOORD2;
    float3 worldPos                 : TEXCOORD3;
    float3 projPos                  : TEXCOORD4;
    float4 lightmapTexCoord1And2    : TEXCOORD5;
    float4 lightmapTexCoord3        : TEXCOORD6;
};

VSOutput main(const VSInput input)
{
    VSOutput output = (VSOutput)0;

    output.lightmapTexCoord3.z = dot(input.vTexCoord0, cBaseTexCoordTransform[0].xy) + cBaseTexCoordTransform[0].w;
    output.lightmapTexCoord3.w = dot(input.vTexCoord0, cBaseTexCoordTransform[1].xy) + cBaseTexCoordTransform[1].w;
    output.lightmapTexCoord1And2.xy = input.vLightmapTexCoord.xy + input.vLightmapTexCoordOffset.xy;

    float2 lightmapTexCoord2 = output.lightmapTexCoord1And2.xy + input.vLightmapTexCoordOffset.xy;
    float2 lightmapTexCoord3 = lightmapTexCoord2 + input.vLightmapTexCoordOffset.xy;

    // Reversed component order
    output.lightmapTexCoord1And2.w = lightmapTexCoord2.x;
    output.lightmapTexCoord1And2.z = lightmapTexCoord2.y;

    output.lightmapTexCoord3.xy = lightmapTexCoord3;

    float3 vNormal;
    DecompressVertex_Normal(input.vNormal, vNormal);

    float3 worldNormal, worldPos;
    SkinPositionAndNormal(g_bSkinning, input.vPos, vNormal, input.vBoneWeights, input.vBoneIndices, worldPos, worldNormal);

    // Transform into projection space
    float4 vProjPos = mul(float4(worldPos, 1), cViewProj);
    output.projPosSetup = vProjPos;
    vProjPos.z = dot(float4(worldPos, 1), cViewProjZ);

    output.projPos = vProjPos.xyz;
    output.fog = CalcFog(worldPos, vProjPos.xyz, g_FogType);

    // Needed for water fog alpha and diffuse lighting 
    output.worldPos = worldPos;
    output.worldNormal = normalize(worldNormal);

    // Scalar attenuations for four lights
    output.lightAtten = float4(0, 0, 0, 0);

    #if NUM_LIGHTS > 0
        output.lightAtten.x = GetVertexAttenForLight(worldPos, 0, false);
    #endif

    #if NUM_LIGHTS > 1
        output.lightAtten.y = GetVertexAttenForLight(worldPos, 1, false);
    #endif

    #if NUM_LIGHTS > 2
        output.lightAtten.z = GetVertexAttenForLight(worldPos, 2, false);
    #endif

    #if NUM_LIGHTS > 3
        output.lightAtten.w = GetVertexAttenForLight(worldPos, 3, false);
    #endif

    // Base texture coordinate transform
    output.baseTexCoord.x = dot(input.vTexCoord0, cBaseTexCoordTransform[0].xy);
    output.baseTexCoord.y = dot(input.vTexCoord0, cBaseTexCoordTransform[1].xy);
    output.baseTexCoord = input.vTexCoord0;

    return output;
}
