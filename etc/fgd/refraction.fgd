//-------------------------------------------------------------------------
// The Refraction (a.k.a. REFRACTION, HL2/Refraction) game definition file
// Use this in hammer editor!!!
// WARNING: DO NOT REMOVE base.fgd AND halflife2.fgd - THIS FILE DEPENDS FROM THEM!
//-------------------------------------------------------------------------
@include "halflife2.fgd"

@BaseClass base(BaseDriveableVehicle) = PropVehicleJeep
[
    input StartRemoveTauCannon(void) : "Start the tau removal sequence."
    input FinishRemoveTauCannon(void) : "Finish the tau removal sequence."
    
    input LockEntrance( void ) : "Stops NPC's from entering the vehicle until unlocked."
    input UnlockEntrance( void ) : "Allows NPC's to enter the vehicle."
    input LockExit( void ) : "Stops NPC's from exiting the vehicle until unlocked."
    input UnlockExit( void ) : "Allows NPC's to exit the vehicle."
    input EnableRadar( void ) : "Turn on the Jalopy radar"
    input DisableRadar( void ) : "Turn off the Jalopy radar"
    input EnableRadarDetectEnemies( void ) : "Enable Jalopy radar to detect Striders and Hunters"
    input AddBusterToCargo( void ) : "Put a striderbuster in the cargo trigger"
    input SetCargoHopperVisibility ( bool ) : "Set the strider buster hopper thingy to be visible, or invisible."

    input DisablePhysGun(void) : "Disable physgun interactions with the jeep."
    input EnablePhysGun(void) : "Enable physgun interactions with the jeep (default)."

    input CreateLinkController(void) : "Automatically builds and attaches a link controller to the car, which cuts the node connections under the car while the car is standing still."
    input DestroyLinkController(void) : "Destroys the link controller created by CreateLinkController."

    
    CargoVisible(choices): "Hopper Visible" : 0 : "Is the striderbuster cargo hopper visible?" =
    [
        0 : "No"
        1 : "Yes"
    ]

    spawnflags(Flags) = 
    [
        1 : "HUD Locator Precache" : 0
    ]

    
    output OnCompanionEnteredVehicle(void) : "Companion has entered the vehicle."
    output OnCompanionExitedVehicle(void) : "Companion has exited the vehicle."
    output OnHostileEnteredVehicle(void) : "Hostile has entered the vehicle."
    output OnHostileExitedVehicle(void) : "Hostile has exited the vehicle."
]

@PointClass base(PropVehicleJeep) studioprop() = prop_vehicle_jeep : "Driveable studiomodel jeep."
[
    
]

@PointClass base(PropVehicleJeep) studioprop() = prop_vehicle_buggy : "Driveable studiomodel jeep."
[
    
]

@PointClass base(PropVehicleJeep) studioprop() = prop_vehicle_musclecar : "Driveable studiomodel jeep."
[
    
]

@PointClass base(PropVehicleJeep) studioprop() = prop_vehicle_jalopy : "Driveable studiomodel jeep."
[
    
]

@PointClass color(0 0 255) sidelist(sides) iconsprite("editor/env_cubemap.vmt") = env_cubemap : "An entity that creates a sample point for the Cubic Environment Map."
[
    cubemapsize(choices) : "Cubemap Size" : 0 =
    [
        0 : "Default"
        1 : "1x1"
        2 : "2x2"
        3 : "4x4"
        4 : "8x8"
        5 : "16x16"
        6 : "32x32"
        7 : "64x64"
        8 : "128x128"
        9 : "256x256"
    ]
    sides(sidelist) : "Brush faces": : "(Optional) Brushes faces to directly attach to the env_cubemap. Press Pick then click on faces in the 3D View to select them. Use CTRL while clicking to add or remove from the selection."
    parallaxcorrection(target_destination) : "Cubemap Bounds" : : "(Optional) assigns this cubemap a bounding box for parallax correction (brush entity tied to parallax_obb)."
]

@SolidClass = env_cubemap_parallaxcorrection
[
    targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
]


@PointClass base(Targetname) = postprocess_controller : "An entity that controls the post processing."
[
    input EnableCustomPostEffect(string) : "Enable a custom post-processing effect."
    input DisableCustomPostEffect(string) : "Disable a custom post-processing effect."
    input ResetCustomPostEffect(string) : "Reset a custom post-processing effect to its initial state."
    input SetBloomScale(float) : "Set a custom bloom scale."
    input ResetBloomScale(void) : "Use the default bloom scale."
    input SetTonemapScale(void) : "Set the player's tonemap scale. It should be a value between 0 and 2, where 0 is the eyes fully closed, 1 is use the unchanged autoexposure (default), and 2 is the eye fully wide open."
    input BlendTonemapScale(string) : "Blend from the player's current tonemap scale to a new one. The parameter syntax is as follows: <target tonemap scale> <blend duration>. For example: '0.5 10' would blend from the current tonemap scale to 0.5 over a period of 10 seconds. Tonemap scale is a value between 0 and 2, where 0 is the eyes fully closed, 1 is use the unchanged autoexposure (default), and 2 is the eye fully wide open."
    input SetTonemapRate(float) : "Set the rate for autoexposure adjustment."
    input SetMinAutoExposure(float) : "Set a custom tonemap auto exposure minimum."
    input ResetMinAutoExposure(void) : "Use the default value for tonemap auto exposure minimum."
    input SetMaxAutoExposure(float) : "Set a custom tonemap auto exposure maximum."
    input ResetMaxAutoExposure(void) : "Use the default value for tonemap auto exposure minimum."
]
